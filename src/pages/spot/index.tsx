import React, { useState, useEffect } from 'react';
import styled from 'styled-components';
import { TextH2B, TextH4B } from '@components/Shared/Text';
import { theme, homePadding, FlexBetween } from '@styles/theme';
import SVGIcon from '@utils/SVGIcon';
import { useDispatch } from 'react-redux';
import { setBottomSheet, initBottomSheet } from '@store/bottomSheet';
import { ShareSheet } from '@components/BottomSheet/ShareSheet';
import { SPOT_ITEMS } from '@constants/mock';
import Slider from 'react-slick';
import { useRouter } from 'next/router';
import SpotList from '@components/Pages/Spot/SpotList';

const text = {
  mainTitle: `1,983Í∞úÏùò ÌîÑÏΩîÏä§ÌåüÏùò \n${`ÌöåÏõê`}ÎãòÏùÑ Í∏∞Îã§Î†§Ïöî!`,
  gotoWrite: 'ÏûëÏÑ±Ï§ëÏù∏ ÌîÑÏΩîÏä§Ìåü Ïã†Ï≤≠ÏÑú ÏûëÏÑ±ÏùÑ ÏôÑÎ£åÌï¥\nÏ£ºÏÑ∏Ïöî!',
  gotoShare:
    '[Ìó§Ïù¥Í∑∏ÎùºÏö¥Îìú ÏÑúÏö∏Ïà≤Ï†ê] Ï†ïÏãù Ïò§ÌîàÍπåÏßÄ\n2Î™Ö! Í≥µÏú†Ìï¥ÏÑú Îπ†Î•¥Í≤å Ïò§ÌîàÌï¥Ïöî',
  normalTitle: 'Ïò§Îäò Ï†ïÏã¨ Ìï®Íªò Ï£ºÎ¨∏Ìï¥Ïöî!',
  normalNewSpotTitle: 'Ïã†Í∑ú Ïä§Ìåü',
  normalFcoSpotTitle: 'Î∞∞ÏÜ°ÎπÑ Ï†úÎ°ú! Ïó≠ÏÑ∏Í∂å ÌîÑÏΩîÏä§Ìåü',
  eventTitle: 'Ïù¥Î≤§Ìä∏ ÏßÑÌñâÏ§ëÏù∏ Ïä§Ìåü',
  trialTitle: 'ÎÇ¥Í∞Ä ÏûêÏ£ºÍ∞ÄÎäî Í≥≥ÏùÑ Î¨¥Ìëú ÌîΩÏóÖ Ïä§ÌåüÏúºÎ°ú!',
  trialSubTitle: 'ÎÇ¥ Ï£ºÎ≥Ä Í∞ÄÍ≤åÍ∞Ä Î≥¥Ïù∏Îã§Î©¥? üëÄÌï®Íªò Ï∞∏Ïó¨Ìï¥Ïöî!',
};

const FCO_SPOT_BANNER = [
  {
    id: 1,
    text: 'ÎÇòÏùò ÌöåÏÇ¨‚àôÌïôÍµêÎ•º ÌîÑÏΩîÏä§ÌåüÏúºÎ°ú ÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî!',
    type: 'private',
    icon: 'blackCirclePencil',
  },
  {
    id: 2,
    text: 'ÎÇ¥Í∞Ä ÏûêÏ£ºÍ∞ÄÎäî Ïû•ÏÜåÎ•º ÌîÑÏΩîÏä§ÌåüÏúºÎ°ú\nÎßåÎì§Ïñ¥Î≥¥ÏÑ∏Ïöî!',
    type: 'public',
    icon: 'blackCirclePencil',
  },
  {
    id: 3,
    text: 'ÎÇ¥ Îã®Í≥®Ïπ¥ÌéòÏóêÏÑú ÏÉêÎü¨Îìú ÌîΩÏóÖÌïòÍ∏∞',
    type: 'normal',
    icon: 'blackCirclePencil',
  },
];

const SpotPage = () => {
  const [mouseMoved, setMouseMoved] = useState(false);
  const dispatch = useDispatch();
  const router = useRouter();

  const goToShare = (): void => {
    dispatch(initBottomSheet());
    dispatch(
      setBottomSheet({
        content: <ShareSheet />,
        buttonTitle: '',
      })
    );
  };

  const goToSpotReq = (type: string) => {
    if (!mouseMoved) {
      router.push({
        pathname: '/spot/spot-req',
        query: { type },
      });
    }
  };

  const isLogin = (isLogin: boolean) => {
    if (isLogin) {
      return true;
    }
    return false;
  };

  const settings = {
    arrows: false,
    dots: true,
    sliderToShow: 1,
    slidersToScroll: 1,
    speed: 500,
    centerMode: true,
    infinite: false,
    centerPadding: '20px',
  };

  /* TODO Î°úÍ∑∏Ïù∏ Ïú†Î¨¥, Ïä§ÌåüÏù¥Î†• Ïú†Î¨¥Ïóê Îî∞Î•∏ UI Î∂ÑÍ∏∞Ï≤òÎ¶¨ */
  return (
    <Container>
      <TextH2B padding="24px 0 0 0">{text.mainTitle}</TextH2B>
      {isLogin(true) && (
        <HandleBoxWrapper>
          <TextH4B>{text.gotoWrite}</TextH4B>
          <IconWrapper>
            <SVGIcon name="blackCirclePencil" />
          </IconWrapper>
        </HandleBoxWrapper>
      )}
      {isLogin(true) && (
        <HandleBoxWrapper onClick={goToShare}>
          <TextH4B>{text.gotoShare}</TextH4B>
          <IconWrapper>
            <SVGIcon name="blackCircleShare" />
          </IconWrapper>
        </HandleBoxWrapper>
      )}
      <SpotList items={SPOT_ITEMS} title={text.normalTitle} type="normal" />
      <SpotList
        items={SPOT_ITEMS}
        title={text.normalNewSpotTitle}
        type="normal"
      />
      <SpotList
        items={SPOT_ITEMS}
        title={text.normalFcoSpotTitle}
        type="normal"
      />
      <SlideWrapper {...settings}>
        {FCO_SPOT_BANNER.map((item) => {
          return (
            <SpotRegister
              key={item.id}
              onMouseMove={() => setMouseMoved(true)}
              onMouseDown={() => setMouseMoved(false)}
              onClick={() => goToSpotReq(item.type)}
            >
              <FlexBetween>
                <TextH4B color={theme.black}>{item.text}</TextH4B>
                <IconWrapper>
                  <SVGIcon name={item.icon} />
                </IconWrapper>
              </FlexBetween>
            </SpotRegister>
          );
        })}
      </SlideWrapper>
      <SpotList
        items={SPOT_ITEMS}
        title={text.eventTitle}
        type="event"
        btnText="Ï£ºÎ¨∏ÌïòÍ∏∞"
      />
      <SpotList
        items={SPOT_ITEMS}
        title={text.trialTitle}
        subTitle={text.trialSubTitle}
        type="trial"
        btnText="Ï∞∏Ïó¨ÌïòÍ∏∞"
      />
      <SpotRegister>
        <FlexBetween>
          <TextH4B color={theme.black}>{FCO_SPOT_BANNER[1].text}</TextH4B>
          <IconWrapper>
            <SVGIcon name="blackCirclePencil" />
          </IconWrapper>
        </FlexBetween>
      </SpotRegister>
      <BottomStory>ÌîÑÏΩîÏä§Ìåü Ïä§ÌÜ†Î¶¨</BottomStory>
    </Container>
  );
};

const Container = styled.main`
  width: 100%;
  ${homePadding};
`;

const HandleBoxWrapper = styled.div`
  width: 100%;
  height: 68px;
  background: ${theme.greyScale3};
  margin-top: 24px;
  border-radius: 8px;
  padding: 16px 24px;
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const IconWrapper = styled.div`
  width: 32px;
  height: 32px;
  background: ${theme.black};
  border-radius: 50%;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  box-shadow: 0px 4px 8px 0px #00000033;
`;

const SlideWrapper = styled(Slider)`
  width: 100%;
  padding: 16px 0 0 0;
  .slick-slide > div {
    padding: 0 5px;
  }
`;

const SpotRegister = styled.div`
  width: 100%;
  padding: 16px 0 0 0;

  height: 81px;
  background: ${theme.greyScale3};
  border-radius: 8px;
  padding: 16px;
`;

const BottomStory = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 514px;
  background: ${theme.greyScale6};
  margin-top: 32px;
  font-weight: 700;
`;

export default SpotPage;
